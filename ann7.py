# -*- coding: utf-8 -*-
"""ann7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vrLiGzqp7QEeyII8fvzKu1xrBCU36bef
"""

import numpy as np

def sigmoid(x):
    """Sigmoid activation function"""
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    """Derivative of sigmoid function"""
    return x * (1 - x)

# Input data for logic gates
X = np.array([
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
])

# Get gate type from user
gate = input("Enter gate (AND / OR / XOR): ").strip().upper()

# Set target outputs based on gate
if gate == "AND":
    y = np.array([[0], [0], [0], [1]])
elif gate == "OR":
    y = np.array([[0], [1], [1], [1]])
elif gate == "XOR":
    y = np.array([[0], [1], [1], [0]])
else:
    print("Invalid gate! Defaulting to XOR.")
    y = np.array([[0], [1], [1], [0]])

# Set random seed for reproducibility
np.random.seed(42)

# Network architecture
input_layer_neurons = X.shape[1]  # 2 input neurons
hidden_layer_neurons = 2          # 2 hidden neurons
output_neurons = 1                # 1 output neuron

# Initialize weights and biases with random values
W1 = np.random.uniform(size=(input_layer_neurons, hidden_layer_neurons))
b1 = np.random.uniform(size=(1, hidden_layer_neurons))

W2 = np.random.uniform(size=(hidden_layer_neurons, output_neurons))
b2 = np.random.uniform(size=(1, output_neurons))

# Training parameters
epochs = 10000
learning_rate = 0.1

print(f"\nTraining {gate} gate using Feed-Forward Neural Network with Backpropagation")
print("=" * 70)
print(f"Network Architecture: {input_layer_neurons} -> {hidden_layer_neurons} -> {output_neurons}")
print(f"Learning Rate: {learning_rate}")
print(f"Epochs: {epochs}")
print("=" * 70)

# Training loop
for epoch in range(epochs):
    # Forward propagation
    hidden_input = np.dot(X, W1) + b1
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, W2) + b2
    final_output = sigmoid(final_input)

    # Calculate error
    error = y - final_output

    # Backpropagation
    # Output layer gradients
    d_output = error * sigmoid_derivative(final_output)

    # Hidden layer gradients
    error_hidden = d_output.dot(W2.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)

    # Update weights and biases
    W2 += hidden_output.T.dot(d_output) * learning_rate
    b2 += np.sum(d_output, axis=0, keepdims=True) * learning_rate

    W1 += X.T.dot(d_hidden) * learning_rate
    b1 += np.sum(d_hidden, axis=0, keepdims=True) * learning_rate

    # Print progress every 2000 epochs
    if epoch % 2000 == 0:
        loss = np.mean(np.square(error))
        print(f"Epoch {epoch}, Loss: {loss:.6f}")

print("=" * 70)
print("Training complete!\n")

# Final predictions
print(f"Final Predictions for {gate} gate:")
print("-" * 40)
print("Input\t\tPredicted\tActual")
print("-" * 40)
for i in range(len(X)):
    print(f"{X[i]}\t{final_output[i][0]:.4f}\t\t{y[i][0]}")
print("-" * 40)

# Calculate accuracy
predicted_labels = (final_output > 0.5).astype(int)
accuracy = np.mean(predicted_labels == y) * 100
print(f"\nAccuracy: {accuracy:.2f}%")

print("\n" + "=" * 70)
print("FINAL WEIGHTS AND BIASES")
print("=" * 70)
print("\nWeights from Input to Hidden Layer (W1):")
print(W1)
print("\nBias for Hidden Layer (b1):")
print(b1)
print("\nWeights from Hidden to Output Layer (W2):")
print(W2)
print("\nBias for Output Layer (b2):")
print(b2)